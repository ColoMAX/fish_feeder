<<: !include magics.yaml

esphome:
  name: fishfeeder${NAME_POSTFIX}

preferences:
  flash_write_interval: 1min

ota:
  password: SomethingFishy # Add pass

wifi:
  ap:
    ssid: ${ap_ssid}
    password: !secret ap_psk
captive_portal:

web_server:
  port: ${WEBSERVER_PORT}
  log: ${LOGS_IN_WEB}

globals:
  - id: last_timestamp # to keep track of days interval
    type: time_t
    restore_value: true
    initial_value: "${FF_EPOCH}"
  - id: feed_sum # running total sum of dosages
    type: double
    restore_value: true
    initial_value: "0"
  - id: motor_start_time
    type: struct timeval
    restore_value: false
    initial_value: "{0}"

script:
  - id: script_update_last_update_str
    then:
      lambda: |-
          id(last_update_str).publish_state(strtok(ctime(&id(last_timestamp)), "\n"));
select:
  - platform: template
    name: 02. First feeding of day
    restore_value: true
    optimistic: true
    options:
      - "06:00"
      - "06:15"
      - "06:30"
      - "06:45"
      - "07:00"
      - "07:15"
      - "07:30"
      - "07:45"
      - "08:00"
      - "08:15"
      - "08:30"
      - "08:45"
      - "09:00"
      - "10:00"
      - "11:00"
      - "12:00"
      - "13:00"
      - "14:00"
      - "15:00"
      - "16:00"
      - "17:00"
      - "18:00"
      - "19:00"
      - "20:00"
      - "20:30"
      - "21:00"
      - "21:30"
      - "22:00"
      # - "22:30"
    initial_option: "20:00"
    id: feed_first_time
    icon: mdi:icon7-time
    set_action:
      then:
        - lambda: |-
            int hour_start = atoi(x.substr(0, 2).c_str());
            int min_start = atoi(x.substr(3, 4).c_str());
            int hour_end = atoi(id(feed_last_time).state.substr(0, 2).c_str());
            int min_end = atoi(id(feed_last_time).state.substr(3, 4).c_str());
            if(hour_end*60+min_end<=hour_start*60+min_start){
                auto index = id(feed_first_time).index_of(x);
              if (index.has_value()) {
                auto call= id(feed_last_time).make_call();
                call.set_index(index.value()); // NOTE this is dependent on that the two selections are very similar;off by 1 and same elements
                call.perform();
                id(feed_first_time).update();
              }else{
                ESP_LOGW("select", "feed_last_time dos nto have a value yet");
              }
            }
  - platform: template
    name: 03. Last feeding of day
    restore_value: true
    optimistic: true
    options:
      # - "06:00"
      - "06:15"
      - "06:30"
      - "06:45"
      - "07:00"
      - "07:15"
      - "07:30"
      - "07:45"
      - "08:00"
      - "08:15"
      - "08:30"
      - "08:45"
      - "09:00"
      - "10:00"
      - "11:00"
      - "12:00"
      - "13:00"
      - "14:00"
      - "15:00"
      - "16:00"
      - "17:00"
      - "18:00"
      - "19:00"
      - "20:00"
      - "20:30"
      - "21:00"
      - "21:30"
      - "22:00"
      - "22:30"
    initial_option: "21:00"
    id: feed_last_time
    icon: mdi:icon7-time
    set_action:
      then:
        - lambda: |-
            int hour_start = atoi(id(feed_first_time).state.substr(0, 2).c_str());
            int min_start = atoi(id(feed_first_time).state.substr(3, 4).c_str());
            int hour_end = atoi(x.substr(0, 2).c_str());
            int min_end = atoi(x.substr(3, 4).c_str());
            if(hour_end*60+min_end<=hour_start*60+min_start){
              auto index = id(feed_last_time).index_of(x);
              if (index.has_value()) {
                auto call= id(feed_first_time).make_call();
                call.set_index(index.value()); // NOTE this is dependent on that the two selections are very similar;off by 1 and same elements
                call.perform();
                id(feed_last_time).update();
              }else{
              ESP_LOGW("select", "feed_first_time dos nto have a value yet");
              }
            }
number:
  - platform: template
    name: 05. Number times per day
    min_value: 1
    max_value: 10
    step: 1
    initial_value: 1
    restore_value: true
    id: feed_num_per_day
    optimistic: true
    icon: mdi:icon7-th-list
  - platform: template
    name: 04. Once every ...  days
    min_value: 1
    max_value: 14
    step: 1
    initial_value: 1
    restore_value: true
    id: feed_day_interval
    optimistic: true
    icon: mdi:icon7-table
    set_action:
      then:
        - if:
            condition:
              lambda: 'return x>1;' # Although the scheduler can handle it, this is likely not the intended result for the user.
            then:
              - number.set:
                  id: feed_num_per_day
                  value: 1
  - platform: template
    name: 06. Dosage
    min_value: 0.2
    max_value: 5
    step: 0.2
    initial_value: 1
    restore_value: true
    id: feed_dosage
    optimistic: true
button:
  - platform: template
    name: 01. Manual feed
    icon: mdi:icon-stackexchange
    on_press:
      - cover.open: fishtank_lid
      - delay: 500ms
      - switch.turn_on: feed_motor
      - delay: !lambda |-
          return id(feed_dosage).state*1000; // milliseconds
      - switch.turn_off: feed_motor
      - switch.turn_on: vib_motor
      - delay: 500ms
      - cover.close: fishtank_lid
    id: feeder_trigger
  - platform: template
    name: 08. Reset last feeding time
    on_press:
      - then:
         - globals.set:
            id: last_timestamp
            value: "${FF_EPOCH}"
         - script.execute: script_update_last_update_str
    id: last_time_btn
switch:
  - platform: template
    id: feed_motor
    # inverted: true
    restore_mode: ALWAYS_OFF
    turn_on_action:
      then:
        - lambda: |-
            id(sntptime).now().timestamp;
            struct timeval tv;
            gettimeofday(&tv,NULL);
            id(motor_start_time)=tv;
        - servo.write:
            id: screw_servo
            level: -20%
    turn_off_action:
      then:
        - servo.detach: screw_servo
        - lambda: |-
            # define timeval_diff_macro(a, b, result)           \
            do {                                                \
              (result)->tv_sec = (a)->tv_sec - (b)->tv_sec;     \
              (result)->tv_usec = (a)->tv_usec - (b)->tv_usec;  \
              if ((result)->tv_usec < 0) {                      \
                --(result)->tv_sec;                             \
                (result)->tv_usec += 1000000;                   \
              }                                                 \
            } while (0)

            id(sntptime).now().timestamp;
            struct timeval tv;
            struct timeval tvstart = id(motor_start_time);

            gettimeofday(&tv,NULL);
            timeval_diff_macro(&tv,&tvstart,&tv);
            id(feed_sum)+=  (double)tv.tv_sec+tv.tv_usec/1000000.0;
            char fsbuf[15];
            snprintf(fsbuf, sizeof(fsbuf), "%6.2f", id(feed_sum));
            id(feed_sum_str).publish_state(fsbuf);

  - platform: restart
    name: 10. Restart
    restore_mode: ALWAYS_OFF

  - platform: safe_mode
    name: 11. Restart (Safe Mode)
    restore_mode: ALWAYS_OFF
  - platform: template
    name: 12. Restart with Factory Default Settings
    restore_mode: ALWAYS_OFF
    id: factory_reset_trigger
    turn_on_action:
      then:
        # - globals.set: # Does not work as expected
        #    id: feed_sum
        #    value: "0.0"
        - logger.log: "WILL FACTORY RESET IN 1 MIN"
        - delay: 65s
        - switch.turn_on: factory_reset_switch

  - platform: factory_reset
    id: factory_reset_switch
    restore_mode: ALWAYS_OFF

servo:
  - id: screw_servo
    output: screw_pwm
  - id: lid_servo
    output: lid_pwm

cover:
  - platform: template
    id: fishtank_lid
    open_action:
      - servo.write:
          id: lid_servo
          level: 100%
    close_action:
      - servo.write:
          id: lid_servo
          level: -100%
    stop_action:
      - servo.detach: lid_servo
    optimistic: true
    assumed_state: true

binary_sensor:
  - platform: gpio
    pin:
      number: ${BUTTON_GPIO}
      mode:
        input: true
        pullup: true
      inverted: true
    name: "Manual feed button"
    filters:
      - delayed_on_off: 10ms
    id: real_button
    on_press:
      then:
        - cover.open: fishtank_lid
        - delay: 500ms
        - switch.turn_on: feed_motor
    on_release:
      then:
        - delay: 500ms # otherwise motor may continue running, since the next command might get executed before teh turn_on command from the on_press
        - switch.turn_off: feed_motor
        - delay: 1ms
        - switch.turn_on: vib_motor
        - delay: 500ms
        - cover.close: fishtank_lid
    on_multi_click:
      - timing: #  3x (short, long)
          - ON for at most 1s
          - OFF for at most 1s
          - ON for 0.5s to 1s
          - OFF for at least 0.2s
          - ON for at most 1s
          - OFF for at most 1s
          - ON for 0.5s to 1s
          - OFF for at least 0.2s
          - ON for at most 1s
          - OFF for at most 1s
          - ON for 0.5s to 1s
          - OFF for at least 0.2s
        then:
          - logger.log: "DEVICE IS ABOUT TO BE FACTORY RESET in 10 sec"
          - delay: 10s
          - switch.turn_on: vib_motor
          - delay: 500ms
          - switch.turn_on: factory_reset_trigger
    internal: true
text_sensor:
  - platform: template
    name: 07. Last time fed (automatically)
    id: last_update_str
  - platform: template
    name: 09. Running sum fed
    id: feed_sum_str
time:
  - platform: sntp
    id: sntptime
    on_time:
      - seconds: 0
        minutes: /1
        # note minutes: /1, not minutes: 1, the latter only does the first minute of each hour rather than every minute
        then:
          - lambda: |-
              #include "../../../../timing.cpp"
    on_time_sync:
      then:
        - script.execute: script_update_last_update_str

improv_serial:
  # next_url: https://colomax.github.io/fishfeeder/getting-started/#configuration
  next_url: http://{{ip_address}}:${WEBSERVER_PORT}